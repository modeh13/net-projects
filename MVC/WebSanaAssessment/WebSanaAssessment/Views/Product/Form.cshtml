@model WebSanaAssessment.Models.ProductModel

<div class="modal fade" id="product-modal" tabindex="-1" role="dialog" aria-labelledby="form-label" aria-hidden="true">
   <div id="modal-form" class="modal-dialog" role="document">
      <div class="modal-content">
         <div class="modal-header">
            <h5 class="modal-title" id="form-label">Form</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
               <span aria-hidden="true">&times;</span>
            </button>
         </div>

         @using (Html.BeginForm("Form", "Product", FormMethod.Post, new { id = "product-form" }))
         {
            @Html.AntiForgeryToken()

            <div class="modal-body">
               @*@Html.HiddenFor(m => m.Id)
                  @Html.HiddenFor(m => m.Status)
                  @Html.HiddenFor(m => m.CreationDate)*@

               @Html.ValidationSummary(true, "", new { @class = "text-danger" })
               @*@Html.Hidden("IsValid", @ViewData.ModelState.IsValid)*@

               <div class="form-row">
                  <div class="form-group col-md-4 col-12">
                     @Html.LabelFor(model => model.Number)
                     @Html.EditorFor(model => model.Number, new { htmlAttributes = new { @class = "form-control", @placeholder = "Number", @onkeypress = "return validateIntegerKeyPress(event);" } })
                     @Html.ValidationMessageFor(model => model.Number, "", new { @class = "text-danger" })
                  </div>
                  <div class="form-group col-md-8 col-12">
                     @Html.LabelFor(model => model.Title)
                     @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", @placeholder = "Title" } })
                     @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                  </div>
                  <div class="form-group col-md-12">
                     @Html.LabelFor(model => model.Description)
                     @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", @placeholder = "Description" } })
                     @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                  </div>
                  <div class="form-group col-md-6 col-12">
                     @Html.LabelFor(model => model.Price)
                     @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control", @placeholder = "Price", @onkeypress = "return validateFloatKeyPress(this, event);" } })
                     @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
                  </div>
                  <div class="form-group col-md-6 col-12">
                     @Html.LabelFor(model => model.Stock)
                     @Html.EditorFor(model => model.Stock, new { htmlAttributes = new { @class = "form-control", @placeholder = "Stock", @onkeypress = "return validateIntegerKeyPress(event);" } })
                     @Html.ValidationMessageFor(model => model.Stock, "", new { @class = "text-danger" })
                  </div>
               </div>
            </div>
            <div class="modal-footer">
               <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
               <button type="submit" class="btn btn-primary">Save changes</button>
            </div>
         }
      </div>
   </div>
</div>
<!-- Add to be able to Client validation -->
@Scripts.Render("~/bundles/jqueryval")
<script type="text/javascript">
   //SUBMIT method
   $("#modal-form").on("submit", "#product-form", function (e) {
      e.preventDefault();  // prevent standard form submission

      var form = $(this);

      $.when(
         $.ajax({
            url: form.attr("action"),
            method: form.attr("method"),
            data: form.serialize(),
         }).done(function (response) {
            SetProductsTable(response);
            $("#product-modal").modal('hide');
            Notification("Message", "Process was successfully.", "success");

            }).fail(function (jqXHR, textStatus) {              
            Notification("Error", jqXHR.statusText, "error");
         })).then(function () {
         });
   });
</script>